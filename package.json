{
	"name": "git-graph",
	"displayName": "Git Graph",
	"version": "1.31.0-beta-Chinese.7",
	"publisher": "mhutchie",
	"author": {
		"name": "Michael Hutchison",
		"email": "mhutchie@16right.com"
	},
	"description": "在你的仓库中查看Git Graph，并从图形界面中执行Git操作。",
	"keywords": [
		"git",
		"graph",
		"visualise",
		"diff",
		"action"
	],
	"categories": [
		"Other"
	],
	"homepage": "https://github.com/mhutchie/vscode-git-graph",
	"repository": {
		"type": "git",
		"url": "https://github.com/mhutchie/vscode-git-graph.git"
	},
	"bugs": {
		"url": "https://github.com/mhutchie/vscode-git-graph/issues"
	},
	"qna": "https://github.com/mhutchie/vscode-git-graph/wiki/Support-Resources",
	"license": "SEE LICENSE IN 'LICENSE'",
	"icon": "resources/icon.png",
	"engines": {
		"vscode": "^1.38.0"
	},
	"extensionKind": [
		"workspace"
	],
	"activationEvents": [
		"*"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"category": "Git Graph",
				"command": "git-graph.view",
				"title": "查看Git Graph(git日志)",
				"icon": {
					"light": "resources/cmd-icon-light.svg",
					"dark": "resources/cmd-icon-dark.svg"
				}
			},
			{
				"category": "Git Graph",
				"command": "git-graph.addGitRepository",
				"title": "添加Git仓库..."
			},
			{
				"category": "Git Graph",
				"command": "git-graph.clearAvatarCache",
				"title": "清除头像缓存"
			},
			{
				"category": "Git Graph",
				"command": "git-graph.endAllWorkspaceCodeReviews",
				"title": "在工作区中结束所有的代码评审"
			},
			{
				"category": "Git Graph",
				"command": "git-graph.endSpecificWorkspaceCodeReview",
				"title": "在工作区中结束一个特定的代码评审..."
			},
			{
				"category": "Git Graph",
				"command": "git-graph.fetch",
				"title": "从远程仓库获取"
			},
			{
				"category": "Git Graph",
				"command": "git-graph.removeGitRepository",
				"title": "删除Git仓库..."
			},
			{
				"category": "Git Graph",
				"command": "git-graph.resumeWorkspaceCodeReview",
				"title": "在工作区中恢复一个特定的代码评审..."
			},
			{
				"category": "Git Graph",
				"command": "git-graph.version",
				"title": "获取版本信息;"
			},
			{
				"category": "Git Graph",
				"command": "git-graph.openFile",
				"title": "打开文件",
				"icon": "$(go-to-file)",
				"enablement": "isInDiffEditor && resourceScheme == git-graph && git-graph:codiconsSupported"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Git Graph",
			"properties": {
				"git-graph.commitDetailsView.autoCenter": {
					"type": "boolean",
					"default": true,
					"description": "在打开提交详情视图时自动居中。"
				},
				"git-graph.commitDetailsView.fileView.fileTree.compactFolders": {
					"type": "boolean",
					"default": true,
					"description": "以压缩形式呈现提交详细信息视图中的文件树，以便将具有单个子文件夹的文件夹压缩为单个组合文件夹元素。"
				},
				"git-graph.commitDetailsView.fileView.type": {
					"type": "string",
					"enum": [
						"File Tree",
						"Flie List"
					],
					"enumDescriptions": [
						"以树形结构显示文件",
						"在列表中显示文件(对于文件夹结构较深的仓库很有用)"
					],
					"default": "File Tree",
					"description": "设置提交详情视图中使用的文件视图的默认类型。这可以使用提交详细信息视图右侧的控件覆盖每个仓库"
				},
				"git-graph.commitDetailsView.location": {
					"type": "string",
					"enum": [
						"Inline",
						"Docked to Bottom"
					],
					"enumDescriptions": [
						"提交细节视图和提交在同一行显示。",
						"显示停靠在Git Graph视图底部的提交详细信息视图"
					],
					"default": "Inline",
					"description": "指定提交细节视图在Git Graph视图中呈现的位置"
				},
				"git-graph.contextMenuActionsVisibility": {
					"type": "object",
					"default": {},
					"properties": {
						"branch": {
							"type": "object",
							"properties": {
								"checkout": {
									"type": "boolean",
									"title": "切换分支"
								},
								"rename": {
									"type": "boolean",
									"title": "重命名分支..."
								},
								"delete": {
									"type": "boolean",
									"title": "删除分支..."
								},
								"merge": {
									"type": "boolean",
									"title": "合并到当前分支..."
								},
								"rebase": {
									"type": "boolean",
									"title": "在分支上更改当前分支的基位..."
								},
								"push": {
									"type": "boolean",
									"title": "Push 分支..."
								},
								"viewIssue": {
									"type": "boolean",
									"title": "View Issue"
								},
								"createPullRequest": {
									"type": "boolean",
									"title": "Create Pull Request..."
								},
								"createArchive": {
									"type": "boolean",
									"title": "Create Archive"
								},
								"selectInBranchesDropdown": {
									"type": "boolean",
									"title": "Select in Branches Dropdown"
								},
								"unselectInBranchesDropdown": {
									"type": "boolean",
									"title": "Unselect in Branches Dropdown"
								},
								"copyName": {
									"type": "boolean",
									"title": "Copy Branch Name to Clipboard"
								}
							}
						},
						"commit": {
							"type": "object",
							"properties": {
								"addTag": {
									"type": "boolean",
									"title": "Add Tag..."
								},
								"createBranch": {
									"type": "boolean",
									"title": "创建分支..."
								},
								"checkout": {
									"type": "boolean",
									"title": "Checkout..."
								},
								"cherrypick": {
									"type": "boolean",
									"title": "Cherry Pick..."
								},
								"revert": {
									"type": "boolean",
									"title": "Revert..."
								},
								"drop": {
									"type": "boolean",
									"title": "Drop..."
								},
								"merge": {
									"type": "boolean",
									"title": "Merge into current branch..."
								},
								"rebase": {
									"type": "boolean",
									"title": "Rebase current branch on this Commit..."
								},
								"reset": {
									"type": "boolean",
									"title": "Reset current branch to this Commit..."
								},
								"copyHash": {
									"type": "boolean",
									"title": "Copy Commit Hash to Clipboard"
								},
								"copySubject": {
									"type": "boolean",
									"title": "Copy Commit Subject to Clipboard"
								}
							}
						},
						"commitDetailsViewFile": {
							"type": "object",
							"properties": {
								"viewDiff": {
									"type": "boolean",
									"title": "View Diff"
								},
								"viewFileAtThisRevision": {
									"type": "boolean",
									"title": "View File at this Revision"
								},
								"viewDiffWithWorkingFile": {
									"type": "boolean",
									"title": "View Diff with Working File"
								},
								"openFile": {
									"type": "boolean",
									"title": "Open File"
								},
								"markAsReviewed": {
									"type": "boolean",
									"title": "Mark as Reviewed"
								},
								"markAsNotReviewed": {
									"type": "boolean",
									"title": "Mark as Not Reviewed"
								},
								"resetFileToThisRevision": {
									"type": "boolean",
									"title": "Reset File to this Revision..."
								},
								"copyAbsoluteFilePath": {
									"type": "boolean",
									"title": "Copy Absolute File Path to Clipboard"
								},
								"copyRelativeFilePath": {
									"type": "boolean",
									"title": "Copy Relative File Path to Clipboard"
								}
							}
						},
						"remoteBranch": {
							"type": "object",
							"properties": {
								"checkout": {
									"type": "boolean",
									"title": "Checkout Branch..."
								},
								"delete": {
									"type": "boolean",
									"title": "Delete Remote Branch..."
								},
								"fetch": {
									"type": "boolean",
									"title": "Fetch into local branch..."
								},
								"merge": {
									"type": "boolean",
									"title": "Merge into current branch..."
								},
								"pull": {
									"type": "boolean",
									"title": "Pull into current branch..."
								},
								"viewIssue": {
									"type": "boolean",
									"title": "View Issue"
								},
								"createPullRequest": {
									"type": "boolean",
									"title": "Create Pull Request"
								},
								"createArchive": {
									"type": "boolean",
									"title": "Create Archive"
								},
								"selectInBranchesDropdown": {
									"type": "boolean",
									"title": "Select in Branches Dropdown"
								},
								"unselectInBranchesDropdown": {
									"type": "boolean",
									"title": "Unselect in Branches Dropdown"
								},
								"copyName": {
									"type": "boolean",
									"title": "Copy Branch Name to Clipboard"
								}
							}
						},
						"stash": {
							"type": "object",
							"properties": {
								"apply": {
									"type": "boolean",
									"title": "Apply Stash..."
								},
								"createBranch": {
									"type": "boolean",
									"title": "Create Branch from Stash..."
								},
								"pop": {
									"type": "boolean",
									"title": "Pop Stash..."
								},
								"drop": {
									"type": "boolean",
									"title": "Drop Stash..."
								},
								"copyName": {
									"type": "boolean",
									"title": "Copy Stash Name to Clipboard"
								},
								"copyHash": {
									"type": "boolean",
									"title": "Copy Stash Hash to Clipboard"
								}
							}
						},
						"tag": {
							"type": "object",
							"properties": {
								"viewDetails": {
									"type": "boolean",
									"title": "View Details"
								},
								"delete": {
									"type": "boolean",
									"title": "Delete Tag..."
								},
								"push": {
									"type": "boolean",
									"title": "Push Tag..."
								},
								"createArchive": {
									"type": "boolean",
									"title": "Create Archive"
								},
								"copyName": {
									"type": "boolean",
									"title": "Copy Tag Name to Clipboard"
								}
							}
						},
						"uncommittedChanges": {
							"type": "object",
							"properties": {
								"stash": {
									"type": "boolean",
									"title": "Stash uncommitted changes..."
								},
								"reset": {
									"type": "boolean",
									"title": "Reset uncommitted changes..."
								},
								"clean": {
									"type": "boolean",
									"title": "Clean untracked files..."
								},
								"openSourceControlView": {
									"type": "boolean",
									"title": "Open Source Control View"
								}
							}
						}
					},
					"markdownDescription": "自定义哪些上下文菜单动作是可见的。例如，如果您想从分支上下文菜单中隐藏重基(rebase)操作，则此设置的合适值是`{ \"branch\": { \"rebase\": false } }`. 有关如何配置此设置的详细信息，请查看文档 [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility)."
				},
				"git-graph.customBranchGlobPatterns": {
					"type": "array",
					"items": {
						"type": "object",
						"title": "分支全局模式",
						"required": [
							"name",
							"glob"
						],
						"properties": {
							"name": {
								"type": "string",
								"title": "Name of pattern",
								"description": "用于引用“分支”下拉框中的模式的名称"
							},
							"glob": {
								"type": "string",
								"title": "全局模式",
								"description": "The 全局模式 <glob-pattern>, as used in 'git log --glob=<glob-pattern>'. For example: heads/feature/*"
							}
						}
					},
					"default": [],
					"description": "要在“分支”下拉列表中显示的一组自定义分支全局模式。 例如: [{\"name\": \"Feature Requests\", \"glob\": \"heads/feature/*\"}]"
				},
				"git-graph.customEmojiShortcodeMappings": {
					"type": "array",
					"items": {
						"type": "object",
						"title": "Custom Emoji Shortcode Mapping",
						"required": [
							"shortcode",
							"emoji"
						],
						"properties": {
							"shortcode": {
								"type": "string",
								"title": "Emoji Shortcode",
								"description": "Emoji Shortcode (e.g. \":sparkles:\")"
							},
							"emoji": {
								"type": "string",
								"title": "Emoji",
								"description": "Emoji (e.g. \"✨\")"
							}
						}
					},
					"default": [],
					"description": "一组自定义表情符号简码映射。 例如: [{\"shortcode\": \":sparkles:\", \"emoji\":\"✨\"}]"
				},
				"git-graph.customPullRequestProviders": {
					"type": "array",
					"items": {
						"type": "object",
						"title": "Pull Request Provider",
						"required": [
							"name",
							"templateUrl"
						],
						"properties": {
							"name": {
								"type": "string",
								"title": "Name of the Provider",
								"description": "提供程序的唯一标识和显示名称。”."
							},
							"templateUrl": {
								"type": "string",
								"title": "Template URL",
								"markdownDescription": "一个模板URL，可以用来创建一个拉取请求, 在$1- $8变量被替换后，构建最终的URL。有关如何配置此设置的信息，请参阅文档 [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider)."
							}
						}
					},
					"default": [],
					"markdownDescription": "可以在“拉取请求创建”集成中使用的一组自定义拉取请求提供程序。有关如何配置此设置的信息，请参阅 [此处](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider) 的文档。"
				},
				"git-graph.date.format": {
					"type": "string",
					"enum": [
						"Date & Time",
						"Date Only",
						"ISO Date & Time",
						"ISO Date Only",
						"Relative"
					],
					"enumDescriptions": [
						"显示日期和时间（例如“24 Mar 2019 21:34”）",
						"仅显示日期（例如“2019 年 3 月 24 日”）",
						"显示 ISO 日期和时间（例如“2019-03-24 21:34”）",
						"仅显示 ISO 日期（例如“2019-03-24”）",
						"显示相对时间（例如“5 分钟前”）"
					],
					"default": "Date & Time",
					"description": "指定要在Git Graph视图的“时间”列中使用的时间格式。"
				},
				"git-graph.date.type": {
					"type": "string",
					"enum": [
						"Author Date",
						"Commit Date"
					],
					"enumDescriptions": [
						"使用提交时作者的时间",
						"使用提交时提交者的时间"
					],
					"default": "Author Date",
					"description": "指定要在Git Graph视图的“时间”列中显示的时间类型。"
				},
				"git-graph.defaultColumnVisibility": {
					"type": "object",
					"properties": {
						"Date": {
							"type": "boolean",
							"title": "时间列的可见性"
						},
						"Author": {
							"type": "boolean",
							"title": "作者列的可见性"
						},
						"Commit": {
							"type": "boolean",
							"title": "提交列的可见性"
						}
					},
					"default": {
						"Date": true,
						"Author": true,
						"Commit": true
					},
					"description": "指定日期、作者和提交列的默认可见性的对象。例如: {\"Date\": true, \"Author\": true, \"Commit\": true}"
				},
				"git-graph.dialog.addTag.pushToRemote": {
					"type": "boolean",
					"default": false,
					"description": "字段的默认状态，指添加标签后是否应将其推送到远程"
				},
				"git-graph.dialog.addTag.type": {
					"type": "string",
					"enum": [
						"Annotated",
						"Lightweight"
					],
					"default": "Annotated",
					"description": "添加的标签的默认类型"
				},
				"git-graph.dialog.applyStash.reinstateIndex": {
					"type": "boolean",
					"default": false,
					"description": "“恢复索引”复选框的默认状态"
				},
				"git-graph.dialog.cherryPick.noCommit": {
					"type": "boolean",
					"default": false,
					"description": "“不提交”复选框的默认状态"
				},
				"git-graph.dialog.cherryPick.recordOrigin": {
					"type": "boolean",
					"default": false,
					"description": "“记录来源”复选框的默认状态"
				},
				"git-graph.dialog.createBranch.checkOut": {
					"type": "boolean",
					"default": false,
					"description": "切换复选框的默认状态"
				},
				"git-graph.dialog.deleteBranch.forceDelete": {
					"type": "boolean",
					"default": false,
					"description": "“强制删除”复选框的默认状态"
				},
				"git-graph.dialog.fetchIntoLocalBranch.forceFetch": {
					"type": "boolean",
					"default": false,
					"description": "“强制获取”复选框的默认状态"
				},
				"git-graph.dialog.fetchRemote.prune": {
					"type": "boolean",
					"default": false,
					"description": "“修剪”复选框的默认状态"
				},
				"git-graph.dialog.fetchRemote.pruneTags": {
					"type": "boolean",
					"default": false,
					"description": "“修剪标签”复选框的默认状态"
				},
				"git-graph.dialog.general.referenceInputSpaceSubstitution": {
					"type": "string",
					"enum": [
						"None",
						"Hyphen",
						"Underscore"
					],
					"enumDescriptions": [
						"不要替换空格",
						"用连字符替换空格字符，例如: \"new branch\" -> \"new-branch\"。",
						"用下划线替换空格字符，例如: \"new branch\" -> \"new_branch\"."
					],
					"default": "None",
					"description": "指定在对话框中输入或粘贴空格字符时自动执行的替换（例如，创建分支、添加标记等）"
				},
				"git-graph.dialog.merge.noCommit": {
					"type": "boolean",
					"default": false,
					"description": "“不提交”复选框的默认状态"
				},
				"git-graph.dialog.merge.noFastForward": {
					"type": "boolean",
					"default": true,
					"description": "“即使可以快进也创建新提交”复选框的默认状态"
				},
				"git-graph.dialog.merge.squashCommits": {
					"type": "boolean",
					"default": false,
					"description": "“Squash Commits”复选框的默认状态"
				},
				"git-graph.dialog.merge.squashMessageFormat": {
					"type": "string",
					"enum": [
						"Default",
						"Git SQUASH_MSG"
					],
					"enumDescriptions": [
						"使用由Git Graph生成的挤压(squash)消息",
						"使用Git生成的详细squash消息(存储在.git/ squash MSG中)"
					],
					"default": "Default",
					"description": "指定用于控制提交的消息格式(当选择了“控制提交(Squash Commits)”选项时)。"
				},
				"git-graph.dialog.popStash.reinstateIndex": {
					"type": "boolean",
					"default": false,
					"description": " “Reinstate Index(恢复索引)” 复选框的默认状态"
				},
				"git-graph.dialog.pullBranch.noFastForward": {
					"type": "boolean",
					"default": false,
					"description": "“即使可以快进也创建新提交”复选框的默认状态"
				},
				"git-graph.dialog.pullBranch.squashCommits": {
					"type": "boolean",
					"default": false,
					"description": "控制提交(Squash Commits)复选框的默认状态"
				},
				"git-graph.dialog.pullBranch.squashMessageFormat": {
					"type": "string",
					"enum": [
						"Default",
						"Git SQUASH_MSG"
					],
					"enumDescriptions": [
						"使用由Git Graph生成的挤压(squash)消息",
						"使用Git生成的详细squash消息(存储在.git/ squash MSG中)"
					],
					"default": "Default",
					"description": "指定用于控制提交的消息格式(当选择了“控制提交(Squash Commits)”选项时)"
				},
				"git-graph.dialog.rebase.ignoreDate": {
					"type": "boolean",
					"default": true,
					"description": "“忽略日期（仅限非交互式变基）”复选框的默认状态"
				},
				"git-graph.dialog.rebase.launchInteractiveRebase": {
					"type": "boolean",
					"default": false,
					"description": "“在新终端中启动交互式 Rebase”复选框的默认状态"
				},
				"git-graph.dialog.resetCurrentBranchToCommit.mode": {
					"type": "string",
					"enum": [
						"Soft",
						"Mixed",
						"Hard"
					],
					"enumDescriptions": [
						"Soft - Keep all changes, but reset head",
						"Mixed - Keep working tree, but reset index",
						"Hard - Discard all changes"
					],
					"default": "Mixed",
					"description": "用于重置操作的默认模式"
				},
				"git-graph.dialog.resetUncommittedChanges.mode": {
					"type": "string",
					"enum": [
						"Mixed",
						"Hard"
					],
					"enumDescriptions": [
						"Mixed - Keep working tree, but reset index",
						"Hard - Discard all changes"
					],
					"default": "Mixed",
					"description": "用于重置操作的默认模式"
				},
				"git-graph.dialog.stashUncommittedChanges.includeUntracked": {
					"type": "boolean",
					"default": true,
					"description": "“包括未跟踪”复选框的默认状态"
				},
				"git-graph.enhancedAccessibility": {
					"type": "boolean",
					"default": false,
					"description": "色盲用户的提交详细信息视图中的可视文件更改 A|M|D|R|U 指示符.将来，这个设置将启用在Git Graph中任何默认情况下未启用的附加可访问性相关特性"
				},
				"git-graph.fileEncoding": {
					"type": "string",
					"default": "utf8",
					"markdownDescription": "检索特定版本的仓库文件时使用的字符集编码（例如在差异视图中）。可以在 [此处](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings) 找到所有受支持编码的列表",
					"scope": "resource"
				},
				"git-graph.graph.colours": {
					"type": "array",
					"items": {
						"type": "string",
						"description": "HEX 或 RGB 颜色数组",
						"pattern": "^\\s*(#[0-9a-fA-F]{6}|#[0-9a-fA-F]{8}|rgb[a]?\\s*\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3}\\))\\s*$"
					},
					"default": [
						"#0085d9",
						"#d9008f",
						"#00d90a",
						"#d98500",
						"#a300d9",
						"#ff0000",
						"#00d9cc",
						"#e138e8",
						"#85d900",
						"#dc5b23",
						"#6f24d6",
						"#ffcc00"
					],
					"description": "指定图形上使用的颜色"
				},
				"git-graph.graph.style": {
					"type": "string",
					"enum": [
						"rounded",
						"angular"
					],
					"enumDescriptions": [
						"在图表上的分支之间过渡时使用平滑曲线",
						"在图表上的分支之间转换时使用折线"
					],
					"default": "rounded",
					"description": "指定图形上分支之间的过渡样式."
				},
				"git-graph.graph.uncommittedChanges": {
					"type": "string",
					"enum": [
						"Open Circle at the Uncommitted Changes",
						"Open Circle at the Checked Out Commit"
					],
					"enumDescriptions": [
						"将未提交的更改显示为灰色的空心圆圈，用灰色实线连接到 HEAD 引用的提交。因此当前文件系统的状态始终显示为空心圆圈",
						"将未提交的更改显示为灰色的实心圆圈，用灰色虚线连接到 HEAD 引用的提交。因此HEAD引用的提交始终显示为空心圆圈。"
					],
					"default": "Open Circle at the Uncommitted Changes",
					"description": "指定未提交的更改在图表上的显示方式"
				},
				"git-graph.integratedTerminalShell": {
					"type": "string",
					"default": "",
					"description": "指定由Git Graph打开时 VS Code 集成终端要使用的 Shell 可执行文件的路径和文件名。例如，要在 Windows 上使用 Git Bash，此设置通常设置为 \"C:\\Program Files\\Git\\bin\\bash.exe\"。如果此设置留空，则使用默认 Shell",
					"scope": "machine"
				},
				"git-graph.keyboardShortcut.find": {
					"type": "string",
					"enum": [
						"UNASSIGNED",
						"CTRL/CMD + A",
						"CTRL/CMD + B",
						"CTRL/CMD + C",
						"CTRL/CMD + D",
						"CTRL/CMD + E",
						"CTRL/CMD + F",
						"CTRL/CMD + G",
						"CTRL/CMD + H",
						"CTRL/CMD + I",
						"CTRL/CMD + J",
						"CTRL/CMD + K",
						"CTRL/CMD + L",
						"CTRL/CMD + M",
						"CTRL/CMD + N",
						"CTRL/CMD + O",
						"CTRL/CMD + P",
						"CTRL/CMD + Q",
						"CTRL/CMD + R",
						"CTRL/CMD + S",
						"CTRL/CMD + T",
						"CTRL/CMD + U",
						"CTRL/CMD + V",
						"CTRL/CMD + W",
						"CTRL/CMD + X",
						"CTRL/CMD + Y",
						"CTRL/CMD + Z"
					],
					"default": "CTRL/CMD + F",
					"description": "在Git Graph视图中打开查找小组件的键盘快捷键的键绑定"
				},
				"git-graph.keyboardShortcut.refresh": {
					"type": "string",
					"enum": [
						"UNASSIGNED",
						"CTRL/CMD + A",
						"CTRL/CMD + B",
						"CTRL/CMD + C",
						"CTRL/CMD + D",
						"CTRL/CMD + E",
						"CTRL/CMD + F",
						"CTRL/CMD + G",
						"CTRL/CMD + H",
						"CTRL/CMD + I",
						"CTRL/CMD + J",
						"CTRL/CMD + K",
						"CTRL/CMD + L",
						"CTRL/CMD + M",
						"CTRL/CMD + N",
						"CTRL/CMD + O",
						"CTRL/CMD + P",
						"CTRL/CMD + Q",
						"CTRL/CMD + R",
						"CTRL/CMD + S",
						"CTRL/CMD + T",
						"CTRL/CMD + U",
						"CTRL/CMD + V",
						"CTRL/CMD + W",
						"CTRL/CMD + X",
						"CTRL/CMD + Y",
						"CTRL/CMD + Z"
					],
					"default": "CTRL/CMD + R",
					"description": "用于刷新Git Graph视图的键盘快捷键的键绑定"
				},
				"git-graph.keyboardShortcut.scrollToHead": {
					"type": "string",
					"enum": [
						"UNASSIGNED",
						"CTRL/CMD + A",
						"CTRL/CMD + B",
						"CTRL/CMD + C",
						"CTRL/CMD + D",
						"CTRL/CMD + E",
						"CTRL/CMD + F",
						"CTRL/CMD + G",
						"CTRL/CMD + H",
						"CTRL/CMD + I",
						"CTRL/CMD + J",
						"CTRL/CMD + K",
						"CTRL/CMD + L",
						"CTRL/CMD + M",
						"CTRL/CMD + N",
						"CTRL/CMD + O",
						"CTRL/CMD + P",
						"CTRL/CMD + Q",
						"CTRL/CMD + R",
						"CTRL/CMD + S",
						"CTRL/CMD + T",
						"CTRL/CMD + U",
						"CTRL/CMD + V",
						"CTRL/CMD + W",
						"CTRL/CMD + X",
						"CTRL/CMD + Y",
						"CTRL/CMD + Z"
					],
					"default": "CTRL/CMD + H",
					"description": "滚动Git Graph视图的键盘快捷键的键绑定，使其以 HEAD 引用的提交为中心"
				},
				"git-graph.keyboardShortcut.scrollToStash": {
					"type": "string",
					"enum": [
						"UNASSIGNED",
						"CTRL/CMD + A",
						"CTRL/CMD + B",
						"CTRL/CMD + C",
						"CTRL/CMD + D",
						"CTRL/CMD + E",
						"CTRL/CMD + F",
						"CTRL/CMD + G",
						"CTRL/CMD + H",
						"CTRL/CMD + I",
						"CTRL/CMD + J",
						"CTRL/CMD + K",
						"CTRL/CMD + L",
						"CTRL/CMD + M",
						"CTRL/CMD + N",
						"CTRL/CMD + O",
						"CTRL/CMD + P",
						"CTRL/CMD + Q",
						"CTRL/CMD + R",
						"CTRL/CMD + S",
						"CTRL/CMD + T",
						"CTRL/CMD + U",
						"CTRL/CMD + V",
						"CTRL/CMD + W",
						"CTRL/CMD + X",
						"CTRL/CMD + Y",
						"CTRL/CMD + Z"
					],
					"default": "CTRL/CMD + S",
					"description": "将Git Graph视图滚动到加载提交中的第一个（或下一个）暂存的键盘快捷键的键绑定。可以将 Shift 键修饰符应用于此键绑定，以将Git Graph视图滚动到已加载提交中的最后一个（或上一个）暂存。"
				},
				"git-graph.markdown": {
					"type": "boolean",
					"default": true,
					"description": "在提交消息和标签详细信息（粗体、斜体、粗斜体和内联代码块）中解析和呈现内联 Markdown 格式规则的常用子集"
				},
				"git-graph.maxDepthOfRepoSearch": {
					"type": "number",
					"default": 0,
					"description": "指定在工作区中发现仓库时要搜索的子文件夹的最大深度。注意: 搜索子文件夹时不会自动检测子仓库，但可以通过在命令面板中运行 \"Git Graph: Add Git Repository\" 命令手动添加它们"
				},
				"git-graph.openNewTabEditorGroup": {
					"type": "string",
					"enum": [
						"Active",
						"Beside",
						"One",
						"Two",
						"Three",
						"Four",
						"Five",
						"Six",
						"Seven",
						"Eight",
						"Nine"
					],
					"enumDescriptions": [
						"在活动编辑器组中打开新选项卡",
						"打开活动编辑器组旁边的新选项卡",
						"在第一个编辑器组中打开新选项卡",
						"在第二个编辑器组中打开新选项卡",
						"在第三个编辑器组中打开新选项卡",
						"在第四个编辑器组中打开新选项卡",
						"在第五个编辑器组中打开新选项卡",
						"在第六个编辑器组中打开新选项卡",
						"在第七个编辑器组中打开新选项卡",
						"在第八个编辑器组中打开新选项卡",
						"在第九个编辑器组中打开新选项卡"
					],
					"default": "Active",
					"description": "从Git Graph视图执行以下操作时，指定Git Graph应在其中打开新选项卡的编辑器组:查看 Visual Studio 代码差异视图、打开文件、查看特定修订版的文件"
				},
				"git-graph.openToTheRepoOfTheActiveTextEditorDocument": {
					"type": "boolean",
					"default": false,
					"description": "打开包含活动文本编辑器文档的仓库的Git Graph视图"
				},
				"git-graph.referenceLabels.alignment": {
					"type": "string",
					"enum": [
						"Normal",
						"Branches (on the left) & Tags (on the right)",
						"Branches (aligned to the graph) & Tags (on the right)"
					],
					"enumDescriptions": [
						"在“描述”列中的提交消息左侧显示分支和标签标签",
						"在“描述”列中的提交消息左侧显示分支标签，在右侧显示标签标签",
						"在“图形”列中显示与图形对齐的分支标签，并在“说明”列中显示右侧的标签标签。"
					],
					"default": "Normal",
					"description": "指定如何为每个提交对齐分支和标签引用标签"
				},
				"git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": {
					"type": "boolean",
					"default": true,
					"description": "如果本地和远程分支标签引用同一个分支，并且在同一个提交中，则将它们组合起来"
				},
				"git-graph.repository.commits.fetchAvatars": {
					"type": "boolean",
					"default": false,
					"description": "获取提交作者和提交者的头像。通过启用此设置，您同意提交作者和提交者电子邮件地址发送到 GitHub、GitLab 或 Gravatar，具体取决于仓库远程源地址"
				},
				"git-graph.repository.commits.initialLoad": {
					"type": "number",
					"default": 300,
					"description": "指定初始加载的提交次数"
				},
				"git-graph.repository.commits.loadMore": {
					"type": "number",
					"default": 100,
					"description": "指定按下“加载更多提交”按钮或自动加载更多提交时要加载的附加提交的数量"
				},
				"git-graph.repository.commits.loadMoreAutomatically": {
					"type": "boolean",
					"default": true,
					"description": "当视图滚动到底部时，如果存在则自动加载更多提交（而不必按“加载更多提交”按钮）"
				},
				"git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": {
					"type": "boolean",
					"default": false,
					"description": "使用柔和的文本颜色显示不是已检出分支/提交的祖先的提交。仅当 HEAD 引用的提交位于Git Graph视图上加载的提交内时，才会发生静音。"
				},
				"git-graph.repository.commits.mute.mergeCommits": {
					"type": "boolean",
					"default": true,
					"description": "使用柔和的文本颜色显示合并提交"
				},
				"git-graph.repository.commits.order": {
					"type": "string",
					"enum": [
						"date",
						"author-date",
						"topo"
					],
					"enumDescriptions": [
						"按提交时间戳顺序显示提交",
						"按作者时间戳顺序显示提交",
						"避免在混合的多行历史记录上显示提交"
					],
					"default": "date",
					"markdownDescription": "指定Git Graph视图上的提交顺序。有关每个订单选项的更多信息，请参阅 [git log](https://git-scm.com/docs/git-log#_commit_ordering) 这可以通过Git Graph视图的列标题上下文菜单覆盖每个仓库"
				},
				"git-graph.repository.commits.showSignatureStatus": {
					"type": "boolean",
					"default": false,
					"description": "在提交详细信息视图中的提交者右侧显示提交的签名状态（仅适用于签名提交）。将鼠标悬停在签名图标上会显示带有签名详细信息的工具提示。需要在运行 VS Code 的同一台机器上安装 Git（>= 2.4.0）和 GPG（或等效版本）"
				},
				"git-graph.repository.fetchAndPrune": {
					"type": "boolean",
					"default": false,
					"description": "在使用Git图形视图控制条上的获取按钮从远程获取之前，删除远程上不再存在的任何远程跟踪引用"
				},
				"git-graph.repository.fetchAndPruneTags": {
					"type": "boolean",
					"default": false,
					"description": "在使用Git图形视图控制条上的获取按钮从远程获取之前，除远程上不再存在的任何本地标签。需要 Git >= 2.17.0，并启用“Repository: Fetch And Prune”设置。注意:如果您在具有多个远程的仓库中工作，则不建议使用此设置（相反，您可以通过Git Graph视图上的仓库设置小部件中的“获取远程”对话框修剪特定远程的标签）"
				},
				"git-graph.repository.includeCommitsMentionedByReflogs": {
					"type": "boolean",
					"default": false,
					"description": "在Git Graph视图中包含仅由 reflogs 提及的提交（仅在显示所有分支时适用）。这可以在Git图形视图的仓库设置小部件中覆盖每个仓库"
				},
				"git-graph.repository.onLoad.scrollToHead": {
					"type": "boolean",
					"default": false,
					"description": "自动滚动Git Graph视图以使其以 HEAD 引用的提交为中心。仅当 HEAD 引用的提交位于Git Graph视图上加载的提交内时，才会发生这种情况"
				},
				"git-graph.repository.onLoad.showCheckedOutBranch": {
					"type": "boolean",
					"default": false,
					"description": "在Git Graph视图中加载仓库时显示签出的分支。此设置可与“Repository > On Load: Show Specific Branches”结合使用。默认值:false(显示所有分支)"
				},
				"git-graph.repository.onLoad.showSpecificBranches": {
					"type": "array",
					"items": {
						"type": "string",
						"description": "本地分支名称（例如\"master\"）, 以“remotes/”为前缀的远程跟踪分支名称例如 \"remotes/origin/master\"), 或者在 git-graph.customBranchGlobPatterns 中以“--glob=”为前缀的全局模式(例如. \"--glob=heads/feature/*\")."
					},
					"default": [],
					"markdownDescription": "在Git Graph视图中加载仓库时显示特定分支。可以按如下方式指定分支:本地分支名称(例如 `master` ), 以“remotes/”为前缀的远程跟踪分支名称(例如 `remotes/origin/master`), 或者在 `git-graph.customBranchGlobPatterns`中以“--glob=”为前缀的全局模式(例如. `--glob=heads/feature/*`). 此设置可与 \"Repository > On Load: Show Checked Out Branch\"结合使用。默认值:[](显示所有分支)"
				},
				"git-graph.repository.onlyFollowFirstParent": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "在Git Graph视图中发现要加载的提交时，仅关注提交的第一个父项。请参阅 [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) 以了解有关此设置的更多信息。这可以在Git图形视图的仓库设置小部件中覆盖每个仓库"
				},
				"git-graph.repository.showCommitsOnlyReferencedByTags": {
					"type": "boolean",
					"default": true,
					"description": "显示仅由Git Graph中的标签引用的提交"
				},
				"git-graph.repository.showRemoteBranches": {
					"type": "boolean",
					"default": true,
					"description": "默认情况下在Git Graph中显示远程分支。这可以从Git Graph视图的控制栏覆盖每个仓库"
				},
				"git-graph.repository.showRemoteHeads": {
					"type": "boolean",
					"default": true,
					"description": "在Git Graph中显示远程 HEAD 符号引用（例如“origin/HEAD”）"
				},
				"git-graph.repository.showStashes": {
					"type": "boolean",
					"default": true,
					"description": "默认情况下在Git Graph中显示暂存区。这可以在Git图形视图的仓库设置小部件中覆盖每个仓库"
				},
				"git-graph.repository.showTags": {
					"type": "boolean",
					"default": true,
					"description": "默认情况下在Git Graph中显示标签。这可以在Git图形视图的仓库设置小部件中覆盖每个仓库"
				},
				"git-graph.repository.showUncommittedChanges": {
					"type": "boolean",
					"default": true,
					"description": "显示未提交的更改。如果您处理大型仓库，禁用此设置可以减少Git Graph视图的加载时间"
				},
				"git-graph.repository.showUntrackedFiles": {
					"type": "boolean",
					"default": true,
					"description": "查看未提交的更改时显示未跟踪的文件。如果您处理大型仓库，禁用此设置可以减少Git Graph视图的加载时间"
				},
				"git-graph.repository.sign.commits": {
					"type": "boolean",
					"default": false,
					"description": "使用 GPG 或 X.509 启用提交签名"
				},
				"git-graph.repository.sign.tags": {
					"type": "boolean",
					"default": false,
					"description": "使用 GPG 或 X.509 启用标记签名"
				},
				"git-graph.repository.useMailmap": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "在显示作者和提交者姓名及电子邮件地址时尊重 [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) 文件"
				},
				"git-graph.repositoryDropdownOrder": {
					"type": "string",
					"enum": [
						"Full Path",
						"Name",
						"Workspace Full Path"
					],
					"enumDescriptions": [
						"按仓库的完整路径的字母顺序对仓库进行排序",
						"按仓库名称的字母顺序对仓库进行排序",
						"根据 VS Code 工作区文件夹顺序对仓库进行排序，然后按仓库的完整路径的字母顺序排列"
					],
					"default": "Workspace Full Path",
					"description": "指定仓库在Git Graph视图的仓库下拉列表中的排序顺序（仅当当前 VS Code 工作区中存在多个仓库时才可见）"
				},
				"git-graph.retainContextWhenHidden": {
					"type": "boolean",
					"default": true,
					"description": "指定当面板不再可见（例如移动到背景选项卡）时是否保留Git Graph视图的 VS Code 上下文。当切换回Git Graph选项卡时，启用此设置将使Git Graph加载速度显着加快，但具有更高的内存开销"
				},
				"git-graph.showStatusBarItem": {
					"type": "boolean",
					"default": true,
					"description": "显示单击时打开Git Graph视图的状态栏项"
				},
				"git-graph.sourceCodeProviderIntegrationLocation": {
					"type": "string",
					"enum": [
						"Inline",
						"More Actions"
					],
					"enumDescriptions": [
						"在 SCM Providers 的标题上显示“查看Git 图表”操作",
						"在 SCM Providers 标题的“更多操作...”菜单中显示“查看Git Graph”操作"
					],
					"default": "Inline",
					"description": "指定“查看 Git 图表”操作出现在 SCM Providers标题上的位置"
				},
				"git-graph.tabIconColourTheme": {
					"type": "string",
					"enum": [
						"colour",
						"grey"
					],
					"enumDescriptions": [
						"显示适合大多数 VS Code 颜色主题的颜色图标",
						"显示一个灰色图标，它适合主要是灰度的 VS Code 颜色主题"
					],
					"default": "colour",
					"description": "指定Git Graph选项卡上显示的图标的颜色主题"
				},
				"git-graph.autoCenterCommitDetailsView": {
					"type": "boolean",
					"default": true,
					"description": "打开时自动将提交详细信息视图居中",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.commitDetailsView.autoCenter",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.commitDetailsView.autoCenter#`"
				},
				"git-graph.combineLocalAndRemoteBranchLabels": {
					"type": "boolean",
					"default": true,
					"description": "Combine local and remote branch labels if they refer to the same branch, and are on the same commit.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.referenceLabels.combineLocalAndRemoteBranchLabels",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.referenceLabels.combineLocalAndRemoteBranchLabels#`"
				},
				"git-graph.commitDetailsViewFileTreeCompactFolders": {
					"type": "boolean",
					"default": true,
					"description": "Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.commitDetailsView.fileView.fileTree.compactFolders",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.commitDetailsView.fileView.fileTree.compactFolders#`"
				},
				"git-graph.commitDetailsViewLocation": {
					"type": "string",
					"enum": [
						"Inline",
						"Docked to Bottom"
					],
					"enumDescriptions": [
						"Show the Commit Details View inline with the graph",
						"Show the Commit Details View docked to the bottom of theGit Graphview"
					],
					"default": "Inline",
					"description": "指定提交细节视图在Git Graph视图中呈现的位置",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.commitDetailsView.location",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.commitDetailsView.location#`"
				},
				"git-graph.commitOrdering": {
					"type": "string",
					"enum": [
						"date",
						"author-date",
						"topo"
					],
					"enumDescriptions": [
						"Show commits in the commit timestamp order.",
						"Show commits in the author timestamp order.",
						"Avoid showing commits on multiple lines of history intermixed."
					],
					"default": "date",
					"markdownDescription": "Specifies the order of commits on theGit Graphview. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.order",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.order#`"
				},
				"git-graph.dateFormat": {
					"type": "string",
					"enum": [
						"Date & Time",
						"Date Only",
						"ISO Date & Time",
						"ISO Date Only",
						"Relative"
					],
					"enumDescriptions": [
						"Show the date and time, for example \"24 Mar 2019 21:34\"",
						"Show the date only, for example \"24 Mar 2019\"",
						"Show the ISO date and time, for example \"2019-03-24 21:34\"",
						"Show the ISO date only, for example \"2019-03-24\"",
						"Show relative times, for example \"5 minutes ago\""
					],
					"default": "Date & Time",
					"description": "Specifies the date format to be used in the \"Date\" column on theGit GraphView.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.date.format",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.date.format#`"
				},
				"git-graph.dateType": {
					"type": "string",
					"enum": [
						"Author Date",
						"Commit Date"
					],
					"enumDescriptions": [
						"Use the author date of a commit",
						"Use the committer date of a commit"
					],
					"default": "Author Date",
					"description": "Specifies the date type to be displayed in the \"Date\" column on theGit GraphView.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.date.type",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.date.type#`"
				},
				"git-graph.defaultFileViewType": {
					"type": "string",
					"enum": [
						"File Tree",
						"File List"
					],
					"enumDescriptions": [
						"Display files in a tree structure",
						"Display files in a list (useful for repositories with deep folder structures)"
					],
					"default": "File Tree",
					"description": "Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.commitDetailsView.fileView.type",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.commitDetailsView.fileView.type#`"
				},
				"git-graph.fetchAndPrune": {
					"type": "boolean",
					"default": false,
					"description": "Before fetching from remote(s) using the Fetch button on theGit Graph视图Control Bar, remove any remote-tracking references that no longer exist on the remote(s).",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.fetchAndPrune",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.fetchAndPrune#`"
				},
				"git-graph.fetchAvatars": {
					"type": "boolean",
					"default": false,
					"description": "Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.fetchAvatars",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.fetchAvatars#`"
				},
				"git-graph.graphColours": {
					"type": "array",
					"items": {
						"type": "string",
						"description": "Colour (HEX or RGB)",
						"pattern": "^\\s*(#[0-9a-fA-F]{6}|#[0-9a-fA-F]{8}|rgb[a]?\\s*\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3}\\))\\s*$"
					},
					"default": [
						"#0085d9",
						"#d9008f",
						"#00d90a",
						"#d98500",
						"#a300d9",
						"#ff0000",
						"#00d9cc",
						"#e138e8",
						"#85d900",
						"#dc5b23",
						"#6f24d6",
						"#ffcc00"
					],
					"description": "Specifies the colours used on the graph.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.graph.colours",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.graph.colours#`"
				},
				"git-graph.graphStyle": {
					"type": "string",
					"enum": [
						"rounded",
						"angular"
					],
					"enumDescriptions": [
						"Use smooth curves when transitioning between branches on the graph",
						"Use angular lines when transitioning between branches on the graph"
					],
					"default": "rounded",
					"description": "Specifies the style of the graph.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.graph.style",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.graph.style#`"
				},
				"git-graph.includeCommitsMentionedByReflogs": {
					"type": "boolean",
					"default": false,
					"description": "Include commits only mentioned by reflogs in theGit Graph视图(only applies when showing all branches). 这可以在Git图形视图的仓库设置小部件中覆盖每个仓库",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.includeCommitsMentionedByReflogs",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.includeCommitsMentionedByReflogs#`"
				},
				"git-graph.initialLoadCommits": {
					"type": "number",
					"default": 300,
					"description": "Specifies the number of commits to initially load.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.initialLoad",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.initialLoad#`"
				},
				"git-graph.loadMoreCommits": {
					"type": "number",
					"default": 100,
					"description": "Specifies the number of additional commits to load when the \"Load More Commits\" button is pressed, or more commits are automatically loaded.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.loadMore",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.loadMore#`"
				},
				"git-graph.loadMoreCommitsAutomatically": {
					"type": "boolean",
					"default": true,
					"description": "When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the \"Load More Commits\" button).",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.loadMoreAutomatically",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.loadMoreAutomatically#`"
				},
				"git-graph.muteCommitsThatAreNotAncestorsOfHead": {
					"type": "boolean",
					"default": false,
					"description": "Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on theGit GraphView.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead#`"
				},
				"git-graph.muteMergeCommits": {
					"type": "boolean",
					"default": true,
					"description": "Display merge commits with a muted text color.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.mute.mergeCommits",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.mute.mergeCommits#`"
				},
				"git-graph.onlyFollowFirstParent": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Only follow the first parent of commits when discovering the commits to load in theGit GraphView. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.onlyFollowFirstParent",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.onlyFollowFirstParent#`"
				},
				"git-graph.openDiffTabLocation": {
					"type": "string",
					"enum": [
						"Active",
						"Beside",
						"One",
						"Two",
						"Three",
						"Four",
						"Five",
						"Six",
						"Seven",
						"Eight",
						"Nine"
					],
					"enumDescriptions": [
						"Open the VS Code Diff View in the Active Editor Group.",
						"Open the VS Code Diff View beside the Active Editor Group.",
						"Open the VS Code Diff View in the First Editor Group.",
						"Open the VS Code Diff View in the Second Editor Group.",
						"Open the VS Code Diff View in the Third Editor Group.",
						"Open the VS Code Diff View in the Fourth Editor Group.",
						"Open the VS Code Diff View in the Fifth Editor Group.",
						"Open the VS Code Diff View in the Sixth Editor Group.",
						"Open the VS Code Diff View in the Seventh Editor Group.",
						"Open the VS Code Diff View in the Eighth Editor Group.",
						"Open the VS Code Diff View in the Ninth Editor Group."
					],
					"default": "Active",
					"description": "Specifies which Editor Group the VS Code Diff View is opened in.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.openNewTabEditorGroup",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.openNewTabEditorGroup#`"
				},
				"git-graph.openRepoToHead": {
					"type": "boolean",
					"default": false,
					"description": "When opening or switching repositories in theGit GraphView, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on theGit GraphView.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.onLoad.scrollToHead",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.onLoad.scrollToHead#`"
				},
				"git-graph.referenceLabelAlignment": {
					"type": "string",
					"enum": [
						"Normal",
						"Branches (on the left) & Tags (on the right)",
						"Branches (aligned to the graph) & Tags (on the right)"
					],
					"enumDescriptions": [
						"Show branch & tag labels on the left of the commit message in the 'Description' column.",
						"Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.",
						"Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column."
					],
					"default": "Normal",
					"description": "Specifies how branch and tag reference labels are aligned for each commit.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.referenceLabels.alignment",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.referenceLabels.alignment#`"
				},
				"git-graph.showCommitsOnlyReferencedByTags": {
					"type": "boolean",
					"default": true,
					"description": "Show commits that are only referenced by tags in Git Graph.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.showCommitsOnlyReferencedByTags",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.showCommitsOnlyReferencedByTags#`"
				},
				"git-graph.showCurrentBranchByDefault": {
					"type": "boolean",
					"default": false,
					"description": "Show the current branch by default whenGit Graphis opened. Default: false (show all branches)",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.onLoad.showCheckedOutBranch",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.onLoad.showCheckedOutBranch#`"
				},
				"git-graph.showSignatureStatus": {
					"type": "boolean",
					"default": false,
					"description": "Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running VS Code.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.commits.showSignatureStatus",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.commits.showSignatureStatus#`"
				},
				"git-graph.showTags": {
					"type": "boolean",
					"default": true,
					"description": "Show Tags inGit Graphby default. 这可以在Git图形视图的仓库设置小部件中覆盖每个仓库",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.showTags",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.showTags#`"
				},
				"git-graph.showUncommittedChanges": {
					"type": "boolean",
					"default": true,
					"description": "Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of theGit GraphView.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.showUncommittedChanges",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.showUncommittedChanges#`"
				},
				"git-graph.showUntrackedFiles": {
					"type": "boolean",
					"default": true,
					"description": "Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of theGit GraphView.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.showUntrackedFiles",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.showUntrackedFiles#`"
				},
				"git-graph.useMailmap": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.",
					"deprecationMessage": "Depreciated: This setting has been renamed to git-graph.repository.useMailmap",
					"markdownDeprecationMessage": "Depreciated: This setting has been renamed to `#git-graph.repository.useMailmap#`"
				}
			}
		},
		"menus": {
			"commandPalette": [
				{
					"command": "git-graph.openFile",
					"when": "isInDiffEditor && resourceScheme == git-graph && git-graph:codiconsSupported"
				}
			],
			"editor/title": [
				{
					"command": "git-graph.openFile",
					"group": "navigation",
					"when": "isInDiffEditor && resourceScheme == git-graph && git-graph:codiconsSupported"
				}
			],
			"scm/title": [
				{
					"when": "scmProvider == git && config.git-graph.sourceCodeProviderIntegrationLocation == 'Inline'",
					"command": "git-graph.view",
					"group": "navigation"
				},
				{
					"when": "scmProvider == git && config.git-graph.sourceCodeProviderIntegrationLocation == 'More Actions'",
					"command": "git-graph.view",
					"group": "inline"
				}
			]
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"vscode:uninstall": "node ./out/life-cycle/uninstall.js",
		"clean": "node ./.vscode/clean.js",
		"compile": "npm run lint && npm run clean && npm run compile-src && npm run compile-web",
		"compile-src": "tsc -p ./src && node ./.vscode/package-src.js",
		"compile-web": "tsc -p ./web && node ./.vscode/package-web.js",
		"compile-web-debug": "tsc -p ./web && node ./.vscode/package-web.js debug",
		"lint": "eslint -c .eslintrc.json --max-warnings 0 --ext .ts ./src ./tests ./web",
		"package": "vsce package",
		"package-and-install": "npm run package && node ./.vscode/install-package.js",
		"test": "jest --verbose",
		"test-and-report-coverage": "jest --verbose --coverage"
	},
	"dependencies": {
		"iconv-lite": "0.5.0"
	},
	"devDependencies": {
		"@types/jest": "26.0.19",
		"@types/node": "8.10.62",
		"@types/vscode": "1.38.0",
		"@typescript-eslint/eslint-plugin": "4.10.0",
		"@typescript-eslint/parser": "4.10.0",
		"eslint": "7.15.0",
		"jest": "26.6.3",
		"ts-jest": "26.4.4",
		"typescript": "4.0.2",
		"uglify-js": "3.10.0"
	}
}